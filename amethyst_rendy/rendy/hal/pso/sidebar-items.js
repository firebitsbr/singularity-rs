initSidebarItems({"enum":[["AllocationError","An error allocating descriptor sets from a pool."],["BasePipeline","A reference to a parent pipeline.  The assumption is that a parent and derivative/child pipeline have most settings in common, and one may be switched for another more quickly than entirely unrelated pipelines would be."],["BlendOp","Blending operations."],["BlendState","Specifies whether to use blending, and if so, which operatiosn to use for color and alpha channels."],["Comparison","A pixel-wise comparison function."],["CreationError","Error types happening upon PSO creation on the device side."],["DepthTest","Depth test state."],["Descriptor","A handle to a specific shader resource that can be bound for use in a `DescriptorSet`. Usually provided in a [`DescriptorSetWrite`]"],["Factor","Defines the possible blending factors. During blending, the source or destination fragment may be multiplied by a factor to produce the final result."],["FrontFace","The front face winding order of a set of vertices. This is the order of vertexes that define which side of a face is the \"front\"."],["LogicOp","Logic operations used for specifying blend equations."],["PolygonMode","Methods for rasterizing polygons, ie, turning the mesh into a raster image."],["PrimitiveRestart","Describes whether or not primitive restart is supported for an input assembler. Primitive restart is a feature that allows a mark to be placed in an index buffer where it is is \"broken\" into multiple pieces of geometry."],["Stage","Which program stage this shader represents."],["State","Pipeline state which may be static or dynamic."],["StencilOp","The operation to use for stencil masking."],["StencilTest","Defines a stencil test. Stencil testing is an operation performed to cull fragments; the new fragment is tested against the value held in the stencil buffer, and if the test fails the fragment is discarded."],["VertexInputRate","The rate at which to advance input data to shaders for the given buffer"]],"struct":[["AttributeDesc","Vertex attribute description. Notably, completely separate from resource `Descriptor`s used in `DescriptorSet`s."],["BakedStates","Baked-in pipeline states."],["BlendDesc","A description of an equation for how to blend transparent, overlapping fragments."],["ClearRect","A simple struct describing a rect with integer coordinates."],["ColorBlendDesc","PSO color target descriptor."],["ColorMask","Target output color mask."],["ComputePipelineDesc","A description of the data needed to construct a compute pipeline."],["DepthBias","A depth bias allows changing the produced depth values for fragments slightly but consistently. This permits drawing of multiple polygons in the same plane without Z-fighting, such as when trying to draw shadows on a wall."],["DepthStencilDesc","PSO depth-stencil target descriptor."],["DescriptorPoolCreateFlags","Descriptor pool creation flags."],["DescriptorSetCopy","Copies a range of descriptors to be bound from one descriptor set to another Should be provided to the `copy_descriptor_sets` method of a `Device`."],["DescriptorSetWrite","Writes the actual descriptors to be bound into a descriptor set. Should be provided to the `write_descriptor_sets` method of a `Device`."],["Element","A struct element descriptor."],["EntryPoint","Shader entry point."],["Face","Face."],["GraphicsPipelineDesc","A description of all the settings that can be altered when creating a graphics pipeline."],["GraphicsShaderSet","A complete set of shaders to build a graphics pipeline."],["InputAssemblerDesc","All the information needed to create an input assembler."],["Multisampling",""],["PipelineCreationFlags","Pipeline creation flags."],["PipelineStage","Stages of the logical pipeline."],["Rasterizer","Rasterization state."],["Rect","A simple struct describing a rect with integer coordinates."],["ShaderStageFlags","Combination of different shader pipeline stages."],["Specialization","Specialization information structure."],["SpecializationConstant","Specialization constant for pipelines."],["StencilFace","Complete stencil state for a given side of a face."],["VertexBufferDesc","Vertex buffer description. Notably, completely separate from resource `Descriptor`s used in `DescriptorSet`s."],["Viewport","A viewport, generally equating to a window on a display."]],"trait":[["DescriptorPool","A descriptor pool is a collection of memory from which descriptor sets are allocated."]],"type":[["BufferIndex","Index of a vertex buffer."],["ColorValue","A single RGBA float color."],["DepthValue","A single depth value from a depth buffer."],["DescriptorArrayIndex",""],["DescriptorBinding",""],["DescriptorSetIndex",""],["ElemOffset","Offset of an attribute from the start of the buffer, in bytes"],["ElemStride","Offset between attribute values, in bytes"],["InstanceRate","Number of instances between each advancement of the vertex buffer."],["Location","Shader binding location."],["SampleMask",""],["StencilValue","A single value from a stencil buffer."]]});