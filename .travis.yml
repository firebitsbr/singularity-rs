language: rust

sudo: true


before_install:
  - sudo apt-get update


addons:
  apt:
    packages:
    # needed for amethyst.
    - libasound2-dev
    # not sure if these are actually needed. something failed though.
    - pkg-config
    - libssl-dev
    - cmake
    - libfreetype6-dev
    - libexpat1-dev
    - libxcb-composite0-dev
    - libx11-xcb-dev
      # packages from kcov
    - libcurl4-openssl-dev
    - libelf-dev
    - libdw-dev
    - gcc
    - binutils-dev


rust:
  - stable
  - beta
  - nightly


matrix:
  allow_failures:
    - rust: nightly
  fast_finish: true


# Add clippy
before_script:
  - rustup component add clippy



# check, clippy, build, test
script:
    # - cargo check --verbose
    # - cargo build --verbose
    # - cargo clippy -- -D warnings
    # - cargo test --verbose --features empty
  - cargo check --all --no-default-features --features empty
  - cargo check --all --no-default-features --features vulkan
  - cargo clippy --all --no-default-features --features empty -- -D warning
  - cargo clippy --all-targets --all-features -- -D warnings
  - cargo build --all --no-default-features --features empty
  - cargo build --all --no-default-features --features vulkan
  - cargo test  --all --no-default-features --features empty
  - cargo test  --all --no-default-features --features vulkan


after_success:
# from https://medium.com/@Razican/continuous-integration-and-code-coverage-report-for-a-rust-project-5dfd4d68fbe5
# Upload docs (not working yet, requires GH_TOKEN, not sure which rights it needs though
#   - |
#       if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" && "$TRAVIS_PULL_REQUEST" = "false" && "$TRAVIS_BRANCH" == "master" ]]; then
#         cargo doc &&
#         echo "<meta http-equiv=refresh content=0;url=os_balloon/index.html>" > target/doc/index.html &&
#         git clone https://github.com/davisp/ghp-import.git &&
#         ./ghp-import/ghp_import.py -n -p -f -m "Documentation upload" -r https://"$GH_TOKEN"@github.com/"$TRAVIS_REPO_SLUG.git" target/doc &&
#         echo "Uploaded documentation"
#       fi

# Coverage report
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" ]]; then
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
        tar xzf master.tar.gz &&
        cd kcov-master &&
        mkdir build &&
        cd build &&
        cmake .. &&
        make &&
        sudo make install &&
        cd ../.. &&
        rm -rf kcov-master &&
        for file in target/debug/singularity_rs-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
        # for file in target/debug/<FILENAMES>-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
        bash <(curl -s https://codecov.io/bash) &&
        echo "Uploaded code coverage"
      fi






    # If we're building a tag, then publish to crates.io.
    # - if [ ! -z "$TRAVIS_TAG" ]; then cargo publish --token $CRATES_TOKEN; fi
    #
    # env:
    #   global:
    #     secure: <sth>


# from: https://github.com/japaric/trust/blob/master/.travis.yml
# deploy:
#   # TODO update `api_key.secure`
#   # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
#   # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
#   # - Paste the output down here
#   api_key:
#     secure: <sth>
#   file_glob: true
#   file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
#   on:
#     # TODO Here you can pick which targets will generate binary releases
#     # In this example, there are some targets that are tested using the stable
#     # and nightly channels. This condition makes sure there is only one release
#     # for such targets and that's generated using the stable channel
#     condition: $TRAVIS_RUST_VERSION = stable
#     tags: true
#   provider: releases
#   skip_cleanup: true




cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo


branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master


notifications:
  email:
      # recipients:
      #     - <e-mail-address>
    on_success: change # never
    on_failure: always


